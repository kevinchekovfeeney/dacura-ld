#!/usr/bin/env bash

#TODO
#5. firewall
#6. testing framework
# This is a script for init.d control over the dacura fuseki instances
CONFIG_FILE="/etc/dacura/dacura.config"

DEBUG=0

if [ $DEBUG -ge 1 ]; then
  echo "Starting parsing script"
fi

if [ ! -n "$CONFIG_FILE" ] || [ ! -f $CONFIG_FILE ];  then
        echo "$CONFIG_FILE does not exist"
        exit 1
fi

#READ CONFIG FILE
. $CONFIG_FILE

#Ensure Everything is in the right place
if [ ! -n "$INSTANCE_FILE" ] || [ ! -f $INSTANCE_FILE ] ; then
        echo "instance file $INSTANCE_FILE not found"
        exit 1
fi
if [ ! -n "$FUSEKI_HOME" ] || [ ! -d $FUSEKI_HOME ] ; then
        echo "Fuseki home directory $FUSEKI_HOME not found"
        exit 1
fi

if [ ! -n "$LOG_DIR" ] || [ ! -d $LOG_DIR ] ; then
        echo "Log directory $LOG_DIR not found"
        exit 1
fi
if [ ! -n "$PID_DIR" ] || [ ! -d $PID_DIR ] ; then
        echo "PID directory $PID_DIR not found"
        exit 1
fi
if [ ! -n "$CONFIG_DIR" ] || [ ! -d $CONFIG_DIR ] ; then
        echo "Config directory $CONFIG_DIR not found"
        exit 1
fi
if [ ! -n "$STORAGE_BASE" ] || [ ! -d $STORAGE_BASE ] ; then
        echo "Storage base directory $STORAGE_BASE not found"
        exit 1
fi

BASIC_ARGS="$JAVA_OPTIONS -jar $FUSEKI_HOME/fuseki-server.jar"


usage()
{
  echo "Usage: ${0##*/} {start|stop|restart|status|clone|create} [instance]"
  exit 1
}

[ $# -gt 0 ] || usage


# Set up JAVA if not set
if [ -z "$JAVA" ]
then
  JAVA=$(which java)
fi
if [ -z "$JAVA" ]
then
  echo "Cannot find a Java JDK. Please set either set JAVA or put java (>=1.6) in your PATH." 2>&2
  exit 1
fi


NO_START=0

running()
{
  local PID=$(cat "$1" 2>/dev/null) || return 1
  kill -0 "$PID" 2>/dev/null
}

print_started() {
  echo "STARTED Fuseki Instance $2 $3 `date` PID=$(cat "$1" 2>/dev/null) on PORT $4"
}

print_failed() {
  echo "FAILED to start Fuseki Instance $1 $2 `date`"
}


#start instances
start_dacura(){
  if (( NO_START )); then
    echo "Not starting Fuseki - NO_START=1";
    exit
  fi
  echo "Starting Dacura $1"
#    FUSEKI_ARGS="--config=$FUSEKI_CONF"
  while read instance port iconfig; do
        if [ -n "$instance" ] && [ -n "$port" ] && [ -n "$iconfig" ]
        then
                if [ ! -n "$1" ] || [ $1 = $instance ]
                then
                        mkdir -p "$LOG_DIR/$instance"
                        mkdir -p "$PID_DIR/$instance"
                        mkdir -p "$STORAGE_BASE/$instance"
                        #first check for RWX (Read, Write, [Write-Internal, Read-External] (production))
                        if [[ $iconfig == *W* ]]
                         then
                         if [ ! -n "$2" ] || [ $2 = "live" ]
                         then
                          BASIC_ARGS="-Dlog4j.configuration=file:$CONFIG_DIR/$instance/live/log4j.properties $JAVA_OPTIONS -jar $FUSEKI_HOME/fuseki-server.jar"
                          mkdir -p "$STORAGE_BASE/$instance/live"
                          launch_fuseki "$PID_DIR/$instance/live.pid" "$BASIC_ARGS --update --loc=$STORAGE_BASE/$instance/live --port=$port /$instance" "$LOG_DIR/$instance/live_console.log" $instance "live" $port
                         fi
                          if [[ $iconfig == *T* ]]
                          then
                            let port++
                            if [ ! -n "$2" ] || [ $2 = "test" ]
                            then
                              BASIC_ARGS="-Dlog4j.configuration=file:$CONFIG_DIR/$instance/test/log4j.properties $JAVA_OPTIONS -jar $FUSEKI_HOME/fuseki-server.jar"
                              mkdir -p "$STORAGE_BASE/$instance/test"
                              launch_fuseki "$PID_DIR/$instance/test.pid" "$BASIC_ARGS --update --loc=$STORAGE_BASE/$instance/test --port=$port /$instance" "$LOG_DIR/$instance/test_console.log" $instance "test" $port
                            fi
                          fi
                          if [[ $iconfig == *S* ]]
                          then
                            let port++
                            if [ ! -n "$2" ] || [ $2 = "sandbox" ]
                            then
                              BASIC_ARGS="-Dlog4j.configuration=file:$CONFIG_DIR/$instance/sandbox/log4j.properties $JAVA_OPTIONS -jar $FUSEKI_HOME/fuseki-server.jar"
                              mkdir -p "$STORAGE_BASE/$instance/sandbox"
                              launch_fuseki "$PID_DIR/$instance/sandbox.pid" "$BASIC_ARGS --update --loc=$STORAGE_BASE/$instance/sandbox --port=$port /$instance" "$LOG_DIR/$instance/sandbox_console.log" $instance "sandbox" $port
                            fi
                          fi
                        else
                          if [[ $iconfig == *X* ]]
                          then
                           if [ ! -n "$2" ] || [ $2 = "live" ]
                           then
                            BASIC_ARGS="-Dlog4j.configuration=file:$CONFIG_DIR/$instance/live/log4j.properties $JAVA_OPTIONS -jar $FUSEKI_HOME/fuseki-server.jar"
                            mkdir -p "$STORAGE_BASE/$instance/live"
                            launch_fuseki "$PID_DIR/$instance/live.pid" "$BASIC_ARGS --update --localhost --loc=$STORAGE_BASE/$instance/live --port=$port /$instance" "$LOG_DIR/$instance/live_console.log" $instance "live" $port
                          fi
                            let port++
                            if [ ! -n "$2" ] || [ $2 = "live_ro" ]
                            then
                              BASIC_ARGS="-Dlog4j.configuration=file:$CONFIG_DIR/$instance/live_ro/log4j.properties $JAVA_OPTIONS -jar $FUSEKI_HOME/fuseki-server.jar"
                              mkdir -p "$STORAGE_BASE/$instance/live_ro"
                              launch_fuseki "$PID_DIR/$instance/live_ro.pid" "$BASIC_ARGS --loc=$STORAGE_BASE/$instance/live_ro --port=$port /$instance" "$LOG_DIR/$instance/live_ro_console.log" $instance "live_ro" $port
                            fi
                            if [[ $iconfig == *T* ]]
                            then
                              let port++
                              if [ ! -n "$2" ] || [ $2 = "test" ]
                              then
                                BASIC_ARGS="-Dlog4j.configuration=file:$CONFIG_DIR/$instance/test/log4j.properties $JAVA_OPTIONS -jar $FUSEKI_HOME/fuseki-server.jar"
                                mkdir -p "$STORAGE_BASE/$instance/test"
                                launch_fuseki "$PID_DIR/$instance/test.pid" "$BASIC_ARGS --update --localhost --loc=$STORAGE_BASE/$instance/test --port=$port /$instance" "$LOG_DIR/$instance/test_console.log" $instance "test" $port
                              fi
                              let port++
                              if [ ! -n "$2" ] || [ $2 = "test_ro" ]
                              then
                                BASIC_ARGS="-Dlog4j.configuration=file:$CONFIG_DIR/$instance/test_ro/log4j.properties $JAVA_OPTIONS -jar $FUSEKI_HOME/fuseki-server.jar"
                                mkdir -p "$STORAGE_BASE/$instance/test_ro"
                                launch_fuseki "$PID_DIR/$instance/test_ro.pid" "$BASIC_ARGS --loc=$STORAGE_BASE/$instance/test_ro --port=$port /$instance" "$LOG_DIR/$instance/test_ro_console.log" $instance "test_ro" $port
                              fi
                            fi
                            if [[ $iconfig == *S* ]]
                            then
                              let port++
                              if [ ! -n "$2" ] || [ $2 = "sandbox" ]
                              then
                                BASIC_ARGS="-Dlog4j.configuration=file:$CONFIG_DIR/$instance/sandbox/log4j.properties $JAVA_OPTIONS -jar $FUSEKI_HOME/fuseki-server.jar"
                                mkdir -p "$STORAGE_BASE/$instance/sandbox"
                                launch_fuseki "$PID_DIR/$instance/sandbox.pid" "$BASIC_ARGS --update --localhost --loc=$STORAGE_BASE/$instance/sandbox --port=$port /$instance" "$LOG_DIR/$instance/sandbox_console.log" $instance "sandbox" $port
                              fi
                              let port++
                              if [ ! -n "$2" ] || [ $2 = "sanndbox_ro" ]
                              then
                                BASIC_ARGS="-Dlog4j.configuration=file:$CONFIG_DIR/$instance/sandbox_ro/log4j.properties $JAVA_OPTIONS -jar $FUSEKI_HOME/fuseki-server.jar"
                                mkdir -p "$STORAGE_BASE/$instance/sandbox_ro"
                                launch_fuseki "$PID_DIR/$instance/sandbox_ro.pid" "$BASIC_ARGS --loc=$STORAGE_BASE/$instance/sandbox_ro --port=$port /$instance" "$LOG_DIR/$instance/sandbox_ro_console.log" $instance "sandbox_ro" $port
                              fi
                            fi
                          else #assume it is R
                            if [ ! -n "$2" ] || [ $2 = "live_ro" ]
                            then
                              BASIC_ARGS="-Dlog4j.configuration=file:$CONFIG_DIR/$instance/live_ro/log4j.properties $JAVA_OPTIONS -jar $FUSEKI_HOME/fuseki-server.jar"
                              mkdir -p "$STORAGE_BASE/$instance/live_ro"
                              launch_fuseki "$PID_DIR/$instance/live_ro.pid" "$BASIC_ARGS --loc=$STORAGE_BASE/$instance/live_ro --port=$port /$instance" "$LOG_DIR/$instance/live_ro_console.log" $instance "live_ro" $port
                            fi
                            if [[ $iconfig == *T* ]]
                            then
                              let port++
                              if [ ! -n "$2" ] || [ $2 = "test_ro" ]
                              then
                                BASIC_ARGS="-Dlog4j.configuration=file:$CONFIG_DIR/$instance/test_ro/log4j.properties $JAVA_OPTIONS -jar $FUSEKI_HOME/fuseki-server.jar"
                                mkdir -p "$STORAGE_BASE/$instance/test_ro"
                                launch_fuseki "$PID_DIR/$instance/test_ro.pid" "$BASIC_ARGS --loc=$STORAGE_BASE/$instance/test_ro --port=$port /$instance" "$LOG_DIR/$instance/test_ro_console.log" $instance "test_ro" $port
                              fi
                            fi
                            if [[ $iconfig == *S* ]]
                            then
                              let port++
                              if [ ! -n "$2" ] || [ $2 = "test_ro" ]
                              then
                                BASIC_ARGS="-Dlog4j.configuration=file:$CONFIG_DIR/$instance/sandbox_ro/log4j.properties $JAVA_OPTIONS -jar $FUSEKI_HOME/fuseki-server.jar"
                                mkdir -p "$STORAGE_BASE/$instance/sandbox_ro"
                                launch_fuseki "$PID_DIR/$instance/sandbox_ro.pid" "$BASIC_ARGS --loc=$STORAGE_BASE/$instance/sandbox_ro --port=$port /$instance" "$LOG_DIR/$instance/sandbox_ro_console.log" $instance "sandbox_ro" $port
                              fi
                            fi
                          fi
                        fi
                fi
        fi
  done < $INSTANCE_FILE
}


launch_fuseki(){
  if running "$1"
  then
        echo "$4 $5 already running - not started"
  else
  if type start-stop-daemon > /dev/null 2>&1
  then
    unset CH_USER
    if [ -n "$FUSEKI_USER" ]
    then
      CH_USER="--chuid $FUSEKI_USER"
    fi
    if start-stop-daemon --start $CH_USER --chdir "$FUSEKI_HOME" --background --no-close --make-pidfile --pidfile "$1" --startas "$JAVA" -- $2 >> $3 2>&1
    then
      sleep 1
      if running "$1"
      then
        #$6 is the port - open it in iptables..
        print_started $1 $4 $5 $6
      else
        print_failed $4 $5
      fi
    fi
  else
    if running $1
    then
        echo "Already Running Instance $4!"
        exit 1
      else
        # dead pid file - remove
        rm -f "$1"
    fi
    if [ "$FUSEKI_USER" ]; then
      touch "$1"
      chown "$FUSEKI_USER" "$1"
      su - "$FUSEKI_USER" -c "
        echo 'Redirecting Fuseki stderr/stdout to $3'
        exec "$JAVA $2" &> "$3" &
        disown \$!
        echo \$! > '$1'"
    else
      echo "Redirecting Fuseki stderr/stdout to $3"
      exec "$JAVA $2" &> "$3" &
      disown $!
      echo $! > "$1"
    fi
  fi
  fi
}

delete_fuseki_pid_file() {
  rm -f "$1"
}

stop_fuseki(){
  if ! running "$1"
  then
        echo "Fusei Instance $2 $3 not running - not stopped"
  else
  if type start-stop-daemon > /dev/null 2>&1; then
    start-stop-daemon --stop --pidfile "$1" --chdir "$FUSEKI_HOME" --startas "$JAVA" --signal HUP
    TIMEOUT=30
    while running "$1"; do
      if (( TIMEOUT-- == 0 )); then
        start-stop-daemon --stop --pidfile "$1" --chdir "$FUSEKI_HOME" --startas "$JAVA" --signal KILL
      fi
        sleep 1
    done
    delete_fuseki_pid_file $1
    if [ $TIMEOUT -le 0 ]
    then
        echo "Failed to stop Fuseki Instance $2 $3"
    else
        echo "Stopped Fuseki Instance $2 $3"
    fi
  else
    PID=$(cat "$1" 2>/dev/null)
    kill "$PID" 2>/dev/null
    TIMEOUT=30
    while running $1; do
      if (( TIMEOUT-- == 0 )); then
        kill -KILL "$PID" 2>/dev/null
      fi
      sleep 1
    done
    delete_fuseki_pid_file $1
    if [ $TIMEOUT -le 0 ]
    then
        echo "Failed to stop Fuseki Instance $2 $3"
    else
       echo "Stopped Fuseki Instance $2 $3"
    fi
  fi
  fi
}

stop_dacura() {
  echo "Stopping Dacura: $1"
  while read instance port iconfig; do
    if [ -n "$instance" ] && [ -n "$port" ] && [ -n "$iconfig" ]
    then
        if [ ! -n "$1" ] || [ $1 = $instance ]
        then
          if [[ $iconfig == *W* ]] ||  [[ $iconfig == *X* ]]
          then
            #shut down live
            if [ ! -n "$2" ] || [ $2 = "live" ]
            then
              stop_fuseki "$PID_DIR/$instance/live.pid" $instance "live"
            fi
            if [[ $iconfig == *T* ]] && ( [ ! -n "$2" ] || [ $2 = "test" ] )
            then
              stop_fuseki "$PID_DIR/$instance/test.pid" $instance "test"
            fi
            if [[ $iconfig == *S* ]] && ( [ ! -n "$2" ] || [ $2 = "sandbox" ] )
            then
              stop_fuseki "$PID_DIR/$instance/sandbox.pid" $instance "sandbox"
            fi
          fi
          if [[ $iconfig != *W* ]]
          then
            if [ ! -n "$2" ] || [ $2 = "live_ro" ]
            then
              stop_fuseki "$PID_DIR/$instance/live_ro.pid" $instance "live_ro"
              if [[ $iconfig == *T* ]] && ( [ ! -n "$2" ] || [ $2 = "test_ro" ] )
              then
                stop_fuseki "$PID_DIR/$instance/test_ro.pid" $instance "test_ro"
              fi
              if [[ $iconfig == *S* ]] && ( [ ! -n "$2" ] || [ $2 = "sandbox_ro" ] )
              then
                stop_fuseki "$PID_DIR/$instance/sandbox_ro.pid" $instance "sandbox_ro"
              fi
            fi
          fi
        fi
    fi
  done < $INSTANCE_FILE
}

#from instance, from version, to instance, to version
clone(){
        stop_dacura $3 $4
        #mv old ones
        #!dangerous
        mkdir -p "$STORAGE_BASE/$3/$4"
        cp -r $STORAGE_BASE/$1/$2 $STORAGE_BASE/$3/$4
        echo "$3 $4 is now a clone of $1 $2"
        start_dacura $3 $4

#name, port, type (LTSX/R/W)
create(){
  #write into instance configurtion file
  echo -e "$1\t$2\t$3" >> $INSTANCE_FILE;
  #create config dir
  mkdir -p "$CONFIG_DIR/$1"
  mkdir -p "$CONFIG_DIR/$1/live"
  mkdir -p "$CONFIG_DIR/$1/test"
  mkdir -p "$CONFIG_DIR/$1/sandbox"
  mkdir -p "$CONFIG_DIR/$1/live_ro"
  mkdir -p "$CONFIG_DIR/$1/test_ro"
  mkdir -p "$CONFIG_DIR/$1/sandbox_ro"
  #create config files
  cp "$CONFIG_DIR/log4j.template" "$CONFIG_DIR/$1/live/log4j.properties"
  echo "log4j.appender.R.File=$LOG_DIR/$1/live_query.log" >> "$CONFIG_DIR/$1/live/log4j.properties"
  cp "$CONFIG_DIR/log4j.template" "$CONFIG_DIR/$1/test/log4j.properties"
  echo "log4j.appender.R.File=$LOG_DIR/$1/test_query.log" >> "$CONFIG_DIR/$1/test/log4j.properties"
  cp "$CONFIG_DIR/log4j.template" "$CONFIG_DIR/$1/sandbox/log4j.properties"
  echo "log4j.appender.R.File=$LOG_DIR/$1/sandbox_query.log" >> "$CONFIG_DIR/$1/sandbox/log4j.properties"
  cp "$CONFIG_DIR/log4j.template" "$CONFIG_DIR/$1/live_ro/log4j.properties"
  echo "log4j.appender.R.File=$LOG_DIR/$1/live_ro_query.log" >> "$CONFIG_DIR/$1/live_ro/log4j.properties"
  cp "$CONFIG_DIR/log4j.template" "$CONFIG_DIR/$1/test_ro/log4j.properties"
  echo "log4j.appender.R.File=$LOG_DIR/$1/test_ro_query.log" >> "$CONFIG_DIR/$1/test_ro/log4j.properties"
  cp "$CONFIG_DIR/log4j.template" "$CONFIG_DIR/$1/sandbox_ro/log4j.properties"
  echo "log4j.appender.R.File=$LOG_DIR/$1/sandbox_ro_query.log" >> "$CONFIG_DIR/$1/sandbox_ro/log4j.properties"
  #restart web server
  start_dacura $1
  apache2ctl restart
}

status(){
  while read instance port iconfig; do
    if [ -n "$instance" ] && [ -n "$port" ] && [ -n "$iconfig" ]
    then
        if [ ! -n "$1" ] || [ $1 = $instance ]
        then
          if [[ $iconfig == *W* ]] || [[ $iconfig == *X* ]]
          then
            if [ ! -n "$2" ] || [ $2 = "live" ]
            then
                if running "$PID_DIR/$instance/live.pid"
                then
                        echo -n "$instance [live] is running on port $port with pid: "
                        echo `cat "$PID_DIR/$instance/live.pid"`
                else
                        echo "WARNING: $instance [live] is not running."
                fi
            fi
            if ([ ! -n "$2" ] || [ $2 = "test" ]) && [[ $iconfig == *T* ]]
            then
                if running "$PID_DIR/$instance/test.pid"
                then
                        if [[ $iconfig == *W* ]]
                        then
                                let p=$((1 + $port))
                        else
                                let p=$((2 + $port))
                        fi
                        echo -n "$instance [test] is running on port $p with pid: "
                       echo `cat "$PID_DIR/$instance/test.pid"`
                else
                        echo "WARNING: $instance [test] is not running."
                fi
            fi
            if ([ ! -n "$2" ] || [ $2 = "sandbox" ]) && [[ $iconfig == *S* ]]
            then
                if running "$PID_DIR/$instance/sandbox.pid"
                then
                        if [[ $iconfig == *W* ]]
                        then
                                let p=$((port + 2))
                        else
                                let p=$((port + 4))
                        fi
                        echo -n "$instance [sandbox] is running on port $p with pid: "
                        echo `cat "$PID_DIR/$instance/sandbox.pid"`
                else
                        echo "WARNING: $instance [sandbox] is not running."
                fi
            fi
          fi
          if [[ $iconfig != *W* ]]
          then
            if [ ! -n "$2" ] || [ $2 = "live_ro" ]
            then
                if running "$PID_DIR/$instance/live_ro.pid"
                then
                        if [[ $iconfig == *X* ]]
                        then
                                let p=$((port + 1))
                        else
                                let p=$((port))
                        fi
                        echo -n "$instance [live_ro] is running on port $p with pid: "
                        echo `cat "$PID_DIR/$instance/live_ro.pid"`
                else
                        echo "WARNING: $instance [live_ro] is not running."
                fi
            fi
            if ([ ! -n "$2" ] || [ $2 = "test_ro" ] ) && [[ $iconfig == *T* ]]
            then
                if running "$PID_DIR/$instance/test_ro.pid"
                then
                        if [[ $iconfig == *X* ]]
                        then
                                let p=$((port + 3))
                        else
                                let p=$((port + 1))
                        fi
                        echo -n "$instance [test_ro] is running on port $p with pid: "
                        echo `cat "$PID_DIR/$instance/test_ro.pid"`
                else
                        echo "WARNING: $instance [test_ro] is not running."
                fi
          fi
            if ([ ! -n "$2" ] || [ $2 = "sandbox_ro" ]) && [[ $iconfig == *S* ]]
            then
                if running "$PID_DIR/$instance/sandbox_ro.pid"
                then
                        if [[ $iconfig == *X* ]]
                        then
                                let p=$((port + 5))
                        else
                                let p=$((port + 2))
                        fi
                        echo -n "$instance [sandbox_ro] is running on port $p with pid: "
                        echo `cat "$PID_DIR/$instance/sandbox_ro.pid"`
                else
                        echo "WARNING: $instance [sandbox_ro] is not running."
                fi
            fi
          fi
        fi
    fi
  done < $INSTANCE_FILE
}

case $1 in
  start)
    start_dacura $2 $3
  ;;
  stop)
    stop_dacura $2 $3
  ;;
  restart)
    stop_dacura $2 $3
    start_dacura $2 $3
  ;;
  status)
    status $2 $3
  ;;
  create)
    create $2 $3 $4
  ;;
  clone)
    clone $2 $3 $4 $5
  ;;
  *)
    usage
  ;;
esac



exit 0

        